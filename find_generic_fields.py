#!/usr/bin/env python3
"""
Script para identificar campos custom espec√≠ficos (Gen√©rico 1, 2, 3)
"""

import sys
import os
from jira import JIRA
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
import config

def find_generic_fields():
    """Busca los campos Gen√©rico 1, 2, 3 en la API"""
    
    console = Console()
    
    try:
        # Conectar a Jira
        console.print("üîó [cyan]Conectando a Jira...[/cyan]")
        jira = JIRA(
            server=config.JIRA_SERVER,
            basic_auth=(config.JIRA_EMAIL, config.JIRA_API_TOKEN)
        )
        
        # Obtener varios issues para analizar campos con datos
        console.print("üîç [cyan]Obteniendo issues con datos...[/cyan]")
        issues = jira.search_issues('project = CMZ100', maxResults=20)
        
        if not issues:
            console.print("‚ùå [red]No se encontraron issues para analizar[/red]")
            return
        
        console.print(f"üìã [green]Analizando {len(issues)} issues[/green]")
        
        # Buscar campos que contengan "gen√©rico" o valores como "Facturable", "Estimado"
        potential_fields = {}
        
        for issue in issues:
            for field_name in dir(issue.fields):
                if field_name.startswith('customfield_'):
                    try:
                        field_value = getattr(issue.fields, field_name)
                        if field_value is not None:
                            # Convertir valor a string para b√∫squeda
                            value_str = str(field_value).lower()
                            
                            # Buscar valores espec√≠ficos
                            if any(keyword in value_str for keyword in 
                                  ['facturable', 'estimado', 'ninguno', 'gen√©rico', 'generic']):
                                
                                if field_name not in potential_fields:
                                    potential_fields[field_name] = []
                                
                                # Obtener valor legible
                                if hasattr(field_value, 'name'):
                                    display_value = field_value.name
                                elif hasattr(field_value, 'value'):
                                    display_value = str(field_value.value)
                                else:
                                    display_value = str(field_value)
                                
                                if display_value not in potential_fields[field_name]:
                                    potential_fields[field_name].append(display_value)
                    except:
                        continue
        
        # Tambi√©n buscar por opciones espec√≠ficas en todos los campos custom
        console.print("üîç [cyan]Buscando campos con opciones espec√≠ficas...[/cyan]")
        
        target_values = ['facturable', 'estimado', 'ninguno']
        additional_fields = {}
        
        for issue in issues[:10]:  # Limitar para no sobrecargar
            for field_name in dir(issue.fields):
                if field_name.startswith('customfield_'):
                    try:
                        field_value = getattr(issue.fields, field_name)
                        if field_value is not None:
                            # Obtener valor para comparaci√≥n
                            if hasattr(field_value, 'name'):
                                check_value = field_value.name.lower()
                            elif hasattr(field_value, 'value'):
                                check_value = str(field_value.value).lower()
                            else:
                                check_value = str(field_value).lower()
                            
                            # Verificar si contiene alg√∫n valor objetivo
                            for target in target_values:
                                if target in check_value:
                                    if field_name not in additional_fields:
                                        additional_fields[field_name] = []
                                    
                                    display_val = field_value.name if hasattr(field_value, 'name') else str(field_value)
                                    if display_val not in additional_fields[field_name]:
                                        additional_fields[field_name].append(display_val)
                    except:
                        continue
        
        # Combinar resultados
        all_fields = {**potential_fields, **additional_fields}
        
        if all_fields:
            console.print("\n")
            console.print(Panel.fit("üéØ CAMPOS CUSTOM POTENCIALES PARA GEN√âRICO 1, 2, 3", style="bold green"))
            
            table = Table()
            table.add_column("Campo Custom", style="cyan")
            table.add_column("Valores encontrados", style="green")
            table.add_column("Posible asignaci√≥n", style="yellow")
            
            for field_name, values in all_fields.items():
                values_str = " | ".join(values[:5])  # M√°ximo 5 valores
                
                # Determinar posible asignaci√≥n
                values_lower = [v.lower() for v in values]
                if 'facturable' in ' '.join(values_lower):
                    assignment = "üîπ Posible Gen√©rico 2"
                elif 'estimado' in ' '.join(values_lower):
                    assignment = "üî∏ Posible Gen√©rico 3"
                elif 'ninguno' in ' '.join(values_lower):
                    assignment = "üî∫ Posible Gen√©rico 1"
                else:
                    assignment = "‚ùì Revisar manualmente"
                
                table.add_row(field_name, values_str, assignment)
            
            console.print(table)
        else:
            console.print("‚ùå [red]No se encontraron campos que coincidan con los criterios[/red]")
        
        # Buscar tambi√©n por posici√≥n o n√∫mero de campo
        console.print(f"\nüîç [cyan]Buscando campos custom por rango num√©rico...[/cyan]")
        custom_fields_with_data = []
        
        for issue in issues[:5]:
            for field_name in dir(issue.fields):
                if field_name.startswith('customfield_'):
                    try:
                        field_value = getattr(issue.fields, field_name)
                        if field_value is not None and field_name not in [f[0] for f in custom_fields_with_data]:
                            # Obtener n√∫mero del campo
                            field_num = int(field_name.replace('customfield_', ''))
                            
                            display_val = ""
                            if hasattr(field_value, 'name'):
                                display_val = field_value.name
                            elif hasattr(field_value, 'value'):
                                display_val = str(field_value.value)
                            else:
                                display_val = str(field_value)[:50]
                            
                            custom_fields_with_data.append((field_name, field_num, display_val))
                    except:
                        continue
        
        # Ordenar por n√∫mero y mostrar campos recientes
        custom_fields_with_data.sort(key=lambda x: x[1], reverse=True)
        
        console.print(f"\nüìã [cyan]CAMPOS CUSTOM RECIENTES (√∫ltimos 20):[/cyan]")
        for field_name, field_num, value in custom_fields_with_data[:20]:
            console.print(f"   ‚Ä¢ {field_name} (#{field_num}): {value}")
        
    except Exception as e:
        console.print(f"‚ùå [red]Error: {str(e)}[/red]")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    find_generic_fields()
